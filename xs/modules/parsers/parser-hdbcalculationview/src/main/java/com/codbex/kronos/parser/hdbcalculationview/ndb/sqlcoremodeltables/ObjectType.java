/*
 * Copyright (c) 2022 codbex or an codbex affiliate company and contributors
 *
 * All rights reserved. This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-FileCopyrightText: 2022 codbex or an codbex affiliate company and contributors
 * SPDX-License-Identifier: EPL-2.0
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference
// Implementation, v2.3.0
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2020.11.26 at 10:54:28 AM EET
//

package com.codbex.kronos.parser.hdbcalculationview.ndb.sqlcoremodeltables;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;

/**
 * Java class for ObjectType.
 *
 * The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;simpleType name="ObjectType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="UNKNOWN"/&gt;
 *     &lt;enumeration value="TABLE"/&gt;
 *     &lt;enumeration value="VIEW"/&gt;
 *     &lt;enumeration value="PROCEDURE"/&gt;
 *     &lt;enumeration value="FUNCTION"/&gt;
 *     &lt;enumeration value="SCHEMA"/&gt;
 *     &lt;enumeration value="SEQUENCE"/&gt;
 *     &lt;enumeration value="TABLE_SYNONYM"/&gt;
 *     &lt;enumeration value="VIEW_SYNONYM"/&gt;
 *     &lt;enumeration value="INDEX_SYNONYM"/&gt;
 *     &lt;enumeration value="SEQUENCE_SYNONYM"/&gt;
 *     &lt;enumeration value="PROCEDURE_SYNONYM"/&gt;
 *     &lt;enumeration value="JOIN_VIEW"/&gt;
 *     &lt;enumeration value="OLAP_VIEW"/&gt;
 *     &lt;enumeration value="HIERARCHY_VIEW"/&gt;
 *     &lt;enumeration value="CALCULATED_VIEW"/&gt;
 *     &lt;enumeration value="ACTIVATED_TABLE"/&gt;
 *     &lt;enumeration value="TRIGGER"/&gt;
 *     &lt;enumeration value="SYNONYM"/&gt;
 *     &lt;enumeration value="MONITORVIEW"/&gt;
 *     &lt;enumeration value="STRUCTUREDPRIVILEGE"/&gt;
 *     &lt;enumeration value="AUDIT_POLICY"/&gt;
 *     &lt;enumeration value="COLUMN_TABLE"/&gt;
 *     &lt;enumeration value="ROW_TABLE"/&gt;
 *     &lt;enumeration value="REMOTE_SOURCE"/&gt;
 *     &lt;enumeration value="VIRTUAL TABLE"/&gt;
 *     &lt;enumeration value="EXTENDED TABLE"/&gt;
 *     &lt;enumeration value="EPMMODEL"/&gt;
 *     &lt;enumeration value="EPMQUERYSOURCE"/&gt;
 *     &lt;enumeration value="REMOTE SUBSCRIPTION"/&gt;
 *     &lt;enumeration value="PSE"/&gt;
 *     &lt;enumeration value="TABLE_TYPE"/&gt;
 *     &lt;enumeration value="AGENT"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 */
@XmlType(name = "ObjectType", namespace = "http://www.sap.com/ndb/SQLCoreModelTables.ecore")
@XmlEnum
public enum ObjectType {

    /** The unknown. */
    UNKNOWN("UNKNOWN"),

    /** The table. */
    TABLE("TABLE"),

    /** The view. */
    VIEW("VIEW"),

    /** The procedure. */
    PROCEDURE("PROCEDURE"),

    /** The function. */
    FUNCTION("FUNCTION"),

    /** The schema. */
    SCHEMA("SCHEMA"),

    /** The sequence. */
    SEQUENCE("SEQUENCE"),

    /** The table synonym. */
    TABLE_SYNONYM("TABLE_SYNONYM"),

    /** The view synonym. */
    VIEW_SYNONYM("VIEW_SYNONYM"),

    /** The index synonym. */
    INDEX_SYNONYM("INDEX_SYNONYM"),

    /** The sequence synonym. */
    SEQUENCE_SYNONYM("SEQUENCE_SYNONYM"),

    /** The procedure synonym. */
    PROCEDURE_SYNONYM("PROCEDURE_SYNONYM"),

    /** The join view. */
    JOIN_VIEW("JOIN_VIEW"),

    /** The olap view. */
    OLAP_VIEW("OLAP_VIEW"),

    /** The hierarchy view. */
    HIERARCHY_VIEW("HIERARCHY_VIEW"),

    /** The calculated view. */
    CALCULATED_VIEW("CALCULATED_VIEW"),

    /** The activated table. */
    ACTIVATED_TABLE("ACTIVATED_TABLE"),

    /** The trigger. */
    TRIGGER("TRIGGER"),

    /** The synonym. */
    SYNONYM("SYNONYM"),

    /** The monitorview. */
    MONITORVIEW("MONITORVIEW"),

    /** The structuredprivilege. */
    STRUCTUREDPRIVILEGE("STRUCTUREDPRIVILEGE"),

    /** The audit policy. */
    AUDIT_POLICY("AUDIT_POLICY"),

    /** The column table. */
    COLUMN_TABLE("COLUMN_TABLE"),

    /** The row table. */
    ROW_TABLE("ROW_TABLE"),

    /** The remote source. */
    REMOTE_SOURCE("REMOTE_SOURCE"),

    /** The virtual table. */
    @XmlEnumValue("VIRTUAL TABLE") VIRTUAL_TABLE("VIRTUAL TABLE"),

    /** The extended table. */
    @XmlEnumValue("EXTENDED TABLE") EXTENDED_TABLE("EXTENDED TABLE"),

    /** The epmmodel. */
    EPMMODEL("EPMMODEL"),

    /** The epmquerysource. */
    EPMQUERYSOURCE("EPMQUERYSOURCE"),

    /** The remote subscription. */
    @XmlEnumValue("REMOTE SUBSCRIPTION") REMOTE_SUBSCRIPTION("REMOTE SUBSCRIPTION"),

    /** The pse. */
    PSE("PSE"),

    /** The table type. */
    TABLE_TYPE("TABLE_TYPE"),

    /** The agent. */
    AGENT("AGENT");

    /** The value. */
    private final String value;

    /**
     * Instantiates a new object type.
     *
     * @param v the v
     */
    ObjectType(String v) {
        value = v;
    }

    /**
     * From value.
     *
     * @param v the v
     * @return the object type
     */
    public static ObjectType fromValue(String v) {
        for (ObjectType c : ObjectType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

    /**
     * Value.
     *
     * @return the string
     */
    public String value() {
        return value;
    }

}
