/*
 * Copyright (c) 2022-2023 codbex or an codbex affiliate company and contributors
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-FileCopyrightText: 2022 codbex or an codbex affiliate company and contributors
 * SPDX-License-Identifier: EPL-2.0
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.11.26 at 10:54:28 AM EET 
//


package com.codbex.kronos.parser.hdbcalculationview.ndb.basemodelbase;

import javax.xml.bind.annotation.XmlRegistry;


/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.sap.ndb.basemodelbase package.
 * An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {


  /**
   * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.sap.ndb.basemodelbase
   */
  public ObjectFactory() {
  }

  /**
   * Create an instance of {@link CurrencyConversionTables }.
   *
   * @return the currency conversion tables
   */
  public CurrencyConversionTables createCurrencyConversionTables() {
    return new CurrencyConversionTables();
  }

  /**
   * Create an instance of {@link UnitConversionTables }.
   *
   * @return the unit conversion tables
   */
  public UnitConversionTables createUnitConversionTables() {
    return new UnitConversionTables();
  }

  /**
   * Create an instance of {@link TemporalJoinProperties }.
   *
   * @return the temporal join properties
   */
  public TemporalJoinProperties createTemporalJoinProperties() {
    return new TemporalJoinProperties();
  }

  /**
   * Create an instance of {@link FeaturedHierarchyReference }.
   *
   * @return the featured hierarchy reference
   */
  public FeaturedHierarchyReference createFeaturedHierarchyReference() {
    return new FeaturedHierarchyReference();
  }

  /**
   * Create an instance of {@link HierarchyJoinProperties }.
   *
   * @return the hierarchy join properties
   */
  public HierarchyJoinProperties createHierarchyJoinProperties() {
    return new HierarchyJoinProperties();
  }

  /**
   * Create an instance of {@link UnassignedMemberProperties }.
   *
   * @return the unassigned member properties
   */
  public UnassignedMemberProperties createUnassignedMemberProperties() {
    return new UnassignedMemberProperties();
  }

  /**
   * Create an instance of {@link Descriptions }.
   *
   * @return the descriptions
   */
  public Descriptions createDescriptions() {
    return new Descriptions();
  }

  /**
   * Create an instance of {@link EndUserTexts }.
   *
   * @return the end user texts
   */
  public EndUserTexts createEndUserTexts() {
    return new EndUserTexts();
  }

  /**
   * Create an instance of {@link CommentProperties }.
   *
   * @return the comment properties
   */
  public CommentProperties createCommentProperties() {
    return new CommentProperties();
  }

  /**
   * Create an instance of {@link LocalizedText }.
   *
   * @return the localized text
   */
  public LocalizedText createLocalizedText() {
    return new LocalizedText();
  }

  /**
   * Create an instance of {@link SchemaMappingBasedObject }.
   *
   * @return the schema mapping based object
   */
  public SchemaMappingBasedObject createSchemaMappingBasedObject() {
    return new SchemaMappingBasedObject();
  }

  /**
   * Create an instance of {@link QualifiedSQLObjectName }.
   *
   * @return the qualified SQL object name
   */
  public QualifiedSQLObjectName createQualifiedSQLObjectName() {
    return new QualifiedSQLObjectName();
  }

  /**
   * Create an instance of {@link QualifiedColumnObjectName }.
   *
   * @return the qualified column object name
   */
  public QualifiedColumnObjectName createQualifiedColumnObjectName() {
    return new QualifiedColumnObjectName();
  }

  /**
   * Create an instance of {@link NameValuePair }.
   *
   * @return the name value pair
   */
  public NameValuePair createNameValuePair() {
    return new NameValuePair();
  }

}
